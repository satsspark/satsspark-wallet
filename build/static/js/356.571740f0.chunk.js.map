{"version":3,"file":"static/js/356.571740f0.chunk.js","mappings":"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","sources":["../node_modules/js-base64/base64.mjs","../node_modules/@buildonspark/spark-sdk/dist/xhr-transport-RH6LDRXS.js"],"sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","import \"./chunk-MVRQ5US7.js\";\n\n// src/services/xhr-transport.ts\nimport { throwIfAborted } from \"abort-controller-x\";\nimport { Base64 } from \"js-base64\";\nimport { ClientError, Metadata, Status } from \"nice-grpc-common\";\nvar GrpcCallData = class {\n  responseHeaders = new Metadata();\n  responseChunks = [];\n  grpcStatus = Status.UNKNOWN;\n  statusMessage = \"\";\n};\nasync function xhrPost(url, metadata, requestBody, config) {\n  const callData = new GrpcCallData();\n  return new Promise(function(resolve, reject) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url, true);\n    xhr.withCredentials = config?.credentials ?? true;\n    xhr.responseType = \"arraybuffer\";\n    for (const [key, values] of metadata) {\n      for (const value of values) {\n        xhr.setRequestHeader(\n          key,\n          typeof value === \"string\" ? value : Base64.fromUint8Array(value)\n        );\n      }\n    }\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        callData.responseHeaders = headersToMetadata(\n          xhr.getAllResponseHeaders()\n        );\n      } else if (xhr.readyState === XMLHttpRequest.DONE) {\n        resolve(callData);\n      }\n    };\n    xhr.onerror = function() {\n      callData.statusMessage = getErrorDetailsFromHttpResponse(\n        xhr.status,\n        xhr.statusText\n      );\n    };\n    xhr.onloadend = function() {\n      callData.responseChunks.push(new Uint8Array(xhr.response));\n      callData.grpcStatus = getStatusFromHttpCode(xhr.status);\n    };\n    xhr.send(requestBody);\n  });\n}\nfunction concatenateChunks(chunks) {\n  let totalSize = 0;\n  for (const chunk of chunks) {\n    totalSize += chunk.length;\n  }\n  const newData = new Uint8Array(totalSize);\n  let setIndex = 0;\n  for (const chunk of chunks) {\n    newData.set(chunk, setIndex);\n    setIndex += chunk.length;\n  }\n  return newData;\n}\nfunction XHRTransport(config) {\n  return async function* fetchTransport({\n    url,\n    body,\n    metadata,\n    signal,\n    method\n  }) {\n    let requestBody;\n    if (!method.requestStream) {\n      let bodyBuffer;\n      for await (const chunk of body) {\n        bodyBuffer = chunk;\n        break;\n      }\n      requestBody = bodyBuffer;\n    } else {\n      let iterator;\n      requestBody = new ReadableStream({\n        // @ts-ignore\n        type: \"bytes\",\n        start() {\n          iterator = body[Symbol.asyncIterator]();\n        },\n        async pull(controller) {\n          const { done, value } = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            controller.enqueue(value);\n          }\n        },\n        async cancel() {\n          await iterator.return?.();\n        }\n      });\n    }\n    const xhrData = await xhrPost(url, metadata, requestBody, config);\n    yield {\n      type: \"header\",\n      header: xhrData.responseHeaders\n    };\n    if (xhrData.grpcStatus !== Status.OK) {\n      const decoder = new TextDecoder();\n      const message = decoder.decode(concatenateChunks(xhrData.responseChunks));\n      console.warn(message, xhrData.statusMessage);\n      throw new ClientError(\n        method.path,\n        xhrData.grpcStatus,\n        `status=${xhrData.statusMessage}, message=${message}`\n      );\n    }\n    throwIfAborted(signal);\n    try {\n      for (const xhrChunk of xhrData.responseChunks) {\n        if (xhrChunk != null) {\n          yield {\n            type: \"data\",\n            data: xhrChunk\n          };\n        }\n      }\n    } finally {\n      throwIfAborted(signal);\n    }\n  };\n}\nfunction headersToMetadata(headers) {\n  const metadata = new Metadata();\n  const arr = headers.trim().split(/[\\r\\n]+/);\n  arr.forEach((line) => {\n    const parts = line.split(\": \");\n    const header = parts.shift() ?? \"\";\n    const value = parts.join(\": \");\n    metadata.set(header, value);\n  });\n  return metadata;\n}\nfunction getStatusFromHttpCode(statusCode) {\n  switch (statusCode) {\n    case 200:\n      return Status.OK;\n    case 400:\n      return Status.INTERNAL;\n    case 401:\n      return Status.UNAUTHENTICATED;\n    case 403:\n      return Status.PERMISSION_DENIED;\n    case 404:\n      return Status.UNIMPLEMENTED;\n    case 429:\n    case 502:\n    case 503:\n    case 504:\n      return Status.UNAVAILABLE;\n    default:\n      return Status.UNKNOWN;\n  }\n}\nfunction getErrorDetailsFromHttpResponse(statusCode, responseText) {\n  return `Received HTTP ${statusCode} response: ` + (responseText.length > 1e3 ? responseText.slice(0, 1e3) + \"... (truncated)\" : responseText);\n}\nexport {\n  XHRTransport\n};\n"],"names":["version","VERSION","_hasBuffer","Buffer","_TD","TextDecoder","undefined","_TE","TextEncoder","b64chs","Array","prototype","slice","call","b64tab","a","tab","forEach","c","i","b64re","_fromCC","String","fromCharCode","bind","_U8Afrom","Uint8Array","from","it","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","length","charCodeAt","TypeError","substring","_btoa","btoa","toString","_fromUint8Array","u8a","strs","l","push","apply","subarray","join","fromUint8Array","arguments","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","atob","_toUint8Array","split","map","toUint8Array","_unURI","_decode","decode","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","name","body","Object","defineProperty","this","urlsafe","extendUint8Array","gBase64","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","GrpcCallData","constructor","_defineProperty","Metadata","Status","UNKNOWN","async","xhrPost","url","metadata","requestBody","config","callData","Promise","resolve","reject","_config$credentials","xhr","XMLHttpRequest","open","withCredentials","credentials","responseType","key","values","setRequestHeader","Base64","onreadystatechange","readyState","HEADERS_RECEIVED","responseHeaders","headers","trim","line","_parts$shift","parts","header","shift","set","headersToMetadata","getAllResponseHeaders","DONE","onerror","statusCode","responseText","statusMessage","status","statusText","concat","onloadend","responseChunks","response","grpcStatus","OK","INTERNAL","UNAUTHENTICATED","PERMISSION_DENIED","UNIMPLEMENTED","UNAVAILABLE","getStatusFromHttpCode","send","XHRTransport","_fetchTransport","_wrapAsyncGenerator","_ref","signal","method","requestStream","iterator","ReadableStream","type","start","Symbol","asyncIterator","pull","controller","done","next","close","enqueue","cancel","_iterator$return","_iterator2","return","bodyBuffer","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","_awaitAsyncGenerator","err","xhrData","message","chunks","totalSize","chunk","newData","setIndex","concatenateChunks","console","warn","ClientError","path","throwIfAborted","xhrChunk","data","_x"],"sourceRoot":""}